generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  images      String[] // 🖼️ Varias imágenes
  colors      String[] // 🎨 Lista de colores disponibles
  sizes       String[] // 📏 Lista de tallas disponibles
  material    String?
  weight      Float? // ⚖️ Peso del producto
  dimensions  String? // 📐 Dimensiones (Ejemplo: "30x20x10 cm")
  isActive    Boolean   @default(true) // ✅ Si está activo, aparece en la tienda

  // Personalización 🔥
  isCustomizable   Boolean  @default(false) // ✏️ ¿Se puede personalizar?
  allowImageUpload Boolean  @default(false) // 📸 ¿Se puede subir imagen personalizada?
  customTextFields String[] // 📝 Campos de texto personalizados (Ejemplo: "Nombre", "Número")

  variants  Variant[] // 🔗 Relación con variantes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Variant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  color     String // 🎨 Color de la variante
  size      String // 📏 Talla de la variante
  stock     Int // 📦 Stock por variante
  price     Float? // 💰 Precio opcional si la variante tiene otro precio
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // 🔹 Relación inversa con Order (un usuario puede tener varios pedidos)
  orders Order[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}
